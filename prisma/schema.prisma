// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id Int @id @default(autoincrement())
  name String 
  email String @unique
  password String
  Role Role @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress Int?

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  addresses Address[]
  cartItems CartItem[]
  Order Order[]

  @@map("users")
}

model Address {
  id Int @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city String
  country String
  pincode String
  userId Int
  user User @relation(fields: [userId], references: [id])
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@map("addresses")
}

model Product {
  id Int @id @default(autoincrement())
  name String 
  description String @db.Text
  price Decimal
  tags String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  cartItems CartItem[]
  orders  OrderProduct[]

  // @@fulltext([name, description ,tags])


  @@map("products")
}

model CartItem {
  id Int @id @default(autoincrement())
  userId Int 
  user User @relation(fields: [userId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")

}

model Order {
  id        Int           @id @default(autoincrement())
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  netAmount Decimal
  address   String
  status OrderEventStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  products  OrderProduct[] @relation("OrderProducts")
  events    OrderEvent[]   @relation("OrderEvents")

  @@map("order")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], name: "OrderProducts")
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_product")
}

model OrderEvent {
  id        Int               @id @default(autoincrement())
  orderId   Int
  order     Order             @relation(fields: [orderId], references: [id], name: "OrderEvents")
  status    OrderEventStatus  @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("order_events")
}
